# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Surveillance.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.import os
import sys
import os

from nodemodels.cfnnodemodel import CfnNodeModel
from utils.StreamPlayer import StreamerPlayer

# 获取当前文件的父目录路径（即a文件夹的路径）
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)

# 将父目录添加到系统路径中
sys.path.append(parent_dir)
import socket
import datetime
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer, Qt, pyqtSlot
from PyQt5.QtWidgets import QGroupBox, QWidget, QInputDialog, QLabel, QApplication
from utils.vlcPlayer import VideoPlayer

'''忽略import报错'''


class Surveillance(QWidget):
    def __init__(self, manager: CfnNodeModel):
        super().__init__()
        self.layout = QtWidgets.QHBoxLayout(self)
        self.setWindowTitle("Surveillance")
        self.setGeometry(0, 0, 1920, 1080)
        self.groupBox = QGroupBox("")
        self.node_manager = manager
        self._init_signals()
        self.groupBox.setStyleSheet("color: rgb(255, 255, 255);\n"
                                    "border: none;\n"
                                    "border-radius: 3px;\n"
                                    "background-color: #001135;")

        font = QtGui.QFont()
        font.setFamily("微软雅黑")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout.setObjectName("verticalLayout")

        self.top_box = QtWidgets.QGroupBox(self.groupBox)
        self.top_box.setTitle("")
        self.top_box.setObjectName("top_box")
        self.top_box.setStyleSheet("QGroupBox { border: 2px solid #2F528F; border-radius: 20px; }")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.top_box)
        self.horizontalLayout.setObjectName("horizontalLayout")

        font.setBold(True)
        font.setPointSize(10)

        spacerItem1 = QtWidgets.QSpacerItem(176, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)

        self.verticalLayout.addWidget(self.top_box)

        self.player_frame = QtWidgets.QFrame(self.groupBox)
        self.player_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.player_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.player_frame.setObjectName("player_frame")
        self.verticalLayout.addWidget(self.player_frame)

        self.horizontalLayout_v = QtWidgets.QHBoxLayout(self.player_frame)

        target_ip = self.node_manager.demo_conf.get_node('client')['node_ip']
        target_port = self.node_manager.demo_conf.get_node('client')['port']

        self.vlc_streamer = StreamerPlayer(parent=None, addr=target_ip, port=target_port, local_port="2234",
                                           video_source="dshow://:dshow-vdev='Integrated Camera'")

        hostname = socket.gethostname()
        ip_address = socket.gethostbyname(hostname)
        self.vlc_player = VideoPlayer(frame=self.player_frame, videoPath="udp://@" + ip_address + ":2234")
        self.horizontalLayout_v.addWidget(self.vlc_player)

        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout.setStretch(1, 10)
        self.verticalLayout.setStretch(2, 1)

        self.layout.addWidget(self.groupBox)
        self.layout.setContentsMargins(0, 0, 0, 0)

    def _init_signals(self):
        self.node_manager.signal_emitter.QtSignals.service_ctrl.connect(self.slave_service_ctrl)

    @pyqtSlot(str, str, str)
    def slave_service_ctrl(self, service_name: str, action: str, params: str):
        print(f"slave_service_ctrl >>> ... {service_name},{action},{params}")
        service_args = params.split('#')
        # addr, port, interface = service_args[0], service_args[1], service_args[2]
        if action == 'up':
            self.vlc_streamer.startStream()
            self.vlc_player.startPlayer()
        elif action == 'down':
            self.vlc_streamer.stopStream()
            self.vlc_player.stopPlayer()
